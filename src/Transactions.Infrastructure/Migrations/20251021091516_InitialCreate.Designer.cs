// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transactions.Infrastructure.Data;

#nullable disable

namespace Transactions.Infrastructure.Migrations
{
    [DbContext(typeof(TransactionDbContext))]
    [Migration("20251021091516_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Transactions.Domain.Entities.Import", b =>
                {
                    b.Property<Guid>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("import_id");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("received_at");

                    b.Property<int>("RecordCount")
                        .HasColumnType("int")
                        .HasColumnName("record_count");

                    b.Property<string>("Sha256Hash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("sha256");

                    b.Property<string>("SourceFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("source_format");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.HasKey("ImportId");

                    b.HasIndex("Sha256Hash")
                        .IsUnique()
                        .HasDatabaseName("IX_Imports_Sha256Hash");

                    b.ToTable("imports", (string)null);
                });

            modelBuilder.Entity("Transactions.Domain.Entities.ImportError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("field");

                    b.Property<Guid>("ImportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("import_id");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("message");

                    b.Property<int>("RowNumber")
                        .HasColumnType("int")
                        .HasColumnName("row_number");

                    b.HasKey("Id");

                    b.HasIndex("ImportId");

                    b.ToTable("import_errors", (string)null);
                });

            modelBuilder.Entity("Transactions.Domain.Entities.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("currency_code");

                    b.Property<Guid>("ImportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("import_id");

                    b.Property<string>("SourceFormat")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("source_format");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("status_code");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCode")
                        .HasDatabaseName("IX_Transactions_CurrencyCode");

                    b.HasIndex("ImportId");

                    b.HasIndex("StatusCode")
                        .HasDatabaseName("IX_Transactions_StatusCode");

                    b.HasIndex("TransactionDate")
                        .HasDatabaseName("IX_Transactions_TransactionDate");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Transactions.Domain.Entities.ImportError", b =>
                {
                    b.HasOne("Transactions.Domain.Entities.Import", "Import")
                        .WithMany("ImportErrors")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");
                });

            modelBuilder.Entity("Transactions.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Transactions.Domain.Entities.Import", "Import")
                        .WithMany("Transactions")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");
                });

            modelBuilder.Entity("Transactions.Domain.Entities.Import", b =>
                {
                    b.Navigation("ImportErrors");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
